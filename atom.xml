<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WanRu&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/c123760838dcd478e53c84adaa798b78</icon>
  <subtitle>My Blog</subtitle>
  <link href="/wanrublog/atom.xml" rel="self"/>
  
  <link href="http://wanru97.gitee.io/wanrublog/"/>
  <updated>2020-02-29T10:58:07.304Z</updated>
  <id>http://wanru97.gitee.io/wanrublog/</id>
  
  <author>
    <name>WanRu</name>
    <email>wanru97@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue.js 表单与v-model</title>
    <link href="http://wanru97.gitee.io/wanrublog/2019/06/23/Vue.js%E8%A1%A8%E5%8D%95%E4%B8%8Ev-model/"/>
    <id>http://wanru97.gitee.io/wanrublog/2019/06/23/Vue.js%E8%A1%A8%E5%8D%95%E4%B8%8Ev-model/</id>
    <published>2019-06-23T07:09:14.000Z</published>
    <updated>2020-02-29T10:58:07.304Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>vue.js提供了v-model指令，用于在表单类元素上双向绑定数据</strong></p></blockquote><a id="more"></a><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h2 id="在输入框上和文本域上的用法"><a href="#在输入框上和文本域上的用法" class="headerlink" title="在输入框上和文本域上的用法"></a>在输入框上和文本域上的用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">在输入框中的用法&lt;br &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;输入内容&quot; v-model&#x3D;&quot;inText&quot;&#x2F;&gt;</span><br><span class="line">输入框中输入的内容是:&#123;&#123;inText&#125;&#125;&lt;br&#x2F;&gt;</span><br><span class="line">在文本域中的用法&lt;br &#x2F;&gt;</span><br><span class="line">&lt;textarea v-model&#x3D;&quot;inTextarea&quot; cols&#x3D;&quot;30&quot; rows&#x3D;&quot;5&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">文本域中输入的内容是:&#123;&#123;inTextarea&#125;&#125;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">   var app&#x3D;new Vue(&#123;</span><br><span class="line">    el:&quot;#app&quot;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        inText:&#39;&#39;,</span><br><span class="line">        inTextarea:&#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：使用v-model后，表单显示的值只依赖所绑定的数据，不再关心其初始值</strong><br><strong>使用v-model时，输入汉字时，在拼音阶段是不会更新数据的，只有在选定词组之后才会更新，如果需要实时更新，用@input来代替v-model，具体写法使用时查阅即可</strong></p><h2 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h2><h3 id="单个单选按钮"><a href="#单个单选按钮" class="headerlink" title="单个单选按钮"></a>单个单选按钮</h3><p>不需要v-model，直接使用v-bind:checked绑定一个布尔值，为真时选中，为否是不选中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(1)、单个单选按钮&lt;br &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;radio&quot; :checked&#x3D;&quot;picked&quot; &#x2F;&gt;苹果&lt;br &#x2F;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">   var app&#x3D;new Vue(&#123;</span><br><span class="line">    el:&quot;#app&quot;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        picked:false</span><br><span class="line">     &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="多个单选按钮"><a href="#多个单选按钮" class="headerlink" title="多个单选按钮"></a>多个单选按钮</h3><p>需要v-model配合value使用，绑定数据的值与value一致时就会选中该项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(2)、多个单选按钮&lt;br &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&quot;pickme&quot; value&#x3D;&quot;苹果&quot; &#x2F;&gt;苹果&lt;br &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&quot;pickme&quot; value&#x3D;&quot;香蕉&quot; &#x2F;&gt;香蕉&lt;br &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&quot;pickme&quot; value&#x3D;&quot;桃子&quot; &#x2F;&gt;桃子&lt;br &#x2F;&gt;</span><br><span class="line">现在选中的选项是:&#123;&#123;pickme&#125;&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">   var app&#x3D;new Vue(&#123;</span><br><span class="line">    el:&quot;#app&quot;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        pickme:&#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><h3 id="单独使用"><a href="#单独使用" class="headerlink" title="单独使用"></a>单独使用</h3><p>与单选按钮不同的是，复选框单独使用时可以使用v-model绑定一个布尔值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;checked&quot;&#x2F;&gt;铅笔&lt;br &#x2F;&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">       var app&#x3D;new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            checked:false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h3><p>与多个单选按钮的写法一样，也是v-model和value一起，但是绑定的数据类型必须是数组<br>在勾选时候，value的值会自动push到绑定的数据数组中</p><h2 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h2><h3 id="单选"><a href="#单选" class="headerlink" title="单选"></a>单选</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select v-model&#x3D;&quot;other&quot;&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;天津&quot;&gt;天津&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;北京&quot;&gt;北京&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;上海&quot;&gt;上海&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line">&lt;p&gt;选择的选项是&#123;&#123;other&#125;&#125;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>绑定的other数据的数据类型为字符串<br><strong>option中含有value属性时v-model会优先匹配value的值，如果没有则直接匹配option的text</strong></p><h3 id="多选"><a href="#多选" class="headerlink" title="多选"></a>多选</h3><p>只需添加multiple属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select v-model&#x3D;&quot;others&quot; multiple&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;天津&quot;&gt;天津&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;北京&quot;&gt;北京&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;上海&quot;&gt;上海&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line">&lt;p&gt;选择的选项是&#123;&#123;others&#125;&#125;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>注意：绑定的others数据的数据类型是数组</p><h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><h2 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a>.lazy</h2><p>在输入框中，v-mode默认是在input事件中同步输入框的数据，使用修饰符.lazy会使与输入框绑定的数据不会实时改变，而是在失去焦点或是按回车的时候才更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model.lazy&#x3D;&quot;msg&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><h2 id="number"><a href="#number" class="headerlink" title=".number"></a>.number</h2><p>使用修饰符.number可以将输入的数据转换成Number类型，否则就算是输入的数据是数字，但其实是String类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model.number&#x3D;&quot;msg&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><h2 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h2><p>.trim修饰符可以自动过滤输入的首尾空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model.trim&#x3D;&quot;msg&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;vue.js提供了v-model指令，用于在表单类元素上双向绑定数据&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="vue学习笔记" scheme="http://wanru97.gitee.io/wanrublog/tags/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>vue.js中的内置指令</title>
    <link href="http://wanru97.gitee.io/wanrublog/2019/06/15/vue.js%E4%B8%AD%E7%9A%84%E5%86%85%E7%BD%AE%E6%8C%87%E4%BB%A4/"/>
    <id>http://wanru97.gitee.io/wanrublog/2019/06/15/vue.js%E4%B8%AD%E7%9A%84%E5%86%85%E7%BD%AE%E6%8C%87%E4%BB%A4/</id>
    <published>2019-06-15T06:17:22.000Z</published>
    <updated>2020-02-29T10:58:07.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、基本指令"><a href="#一、基本指令" class="headerlink" title="一、基本指令"></a>一、基本指令</h2><h3 id="v-clock"><a href="#v-clock" class="headerlink" title="v-clock"></a>v-clock</h3><p>当网速较慢，vue.js文件还没有加载完时，页面上会显示的字样，直到vue.js创建实例、编译模板时，DOM才会被替换，所以这个过程中屏幕会闪动<br><strong>v-clock是一个解决初始化慢导致页面闪动的最佳实践，需要配合display：none使用</strong></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    [v-cloak]&#123;</span><br><span class="line">        display:none;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;app&quot; v-cloak&gt;</span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app &#x3D;new Vue(&#123;</span><br><span class="line">        el:&#39;.app&#39;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            message:&#39;信息显示&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p><strong>v-once指令的作用是定义它的元素或组件只渲染一次。首次渲染后不会随着数据的变化重新渲染，将被视为静态内容</strong></p><h2 id="二、条件渲染指令"><a href="#二、条件渲染指令" class="headerlink" title="二、条件渲染指令"></a>二、条件渲染指令</h2><h3 id="v-if、v-else-if、v-else"><a href="#v-if、v-else-if、v-else" class="headerlink" title="v-if、v-else-if、v-else"></a>v-if、v-else-if、v-else</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-if&#x3D;&quot;num&#x3D;&#x3D;&#x3D; 3&quot;&gt;此时num为3，将num数值改为2时看看&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p v-else-if&#x3D;&quot;num&#x3D;&#x3D;&#x3D; 2&quot;&gt;num数值为2时显示该行&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p v-else&gt;否则显示该行&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>举个栗子<del>_</del>：<br>有一个用户名输入框，点击按钮后，变为密码输入框</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;app&quot; &gt;</span><br><span class="line">&lt;div v-if&#x3D;&quot;type&#x3D;&#x3D;&#x3D;&#39;name&#39;&quot;&gt;用户：&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入&quot;&#x2F;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-else&gt;密码：&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入&quot;&#x2F;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;button v-on:click&#x3D;&quot;typebut&quot;&gt;点击切换&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app &#x3D;new Vue(&#123;</span><br><span class="line">        el:&#39;.app&#39;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            type:&#39;name&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            typebut:function()&#123;</span><br><span class="line">               this.type&#x3D;(this.type&#x3D;&#x3D;&#x3D;&#39;name&#39;?&#39;pas&#39; :&#39;name&#39;)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>问题出现了，在输入框输入内容后点击切换，虽然DOM变了，但是之前的输入框内容并没有改变，这说明input元素被复用了<br><strong>如何解决这个问题呢？可以添加key属性，key的值必须是唯一的</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if&#x3D;&quot;type&#x3D;&#x3D;&#x3D;&#39;name&#39;&quot;&gt;用户：&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入&quot; key&#x3D;&quot;usename&quot;&#x2F;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-else&gt;密码：&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入&quot; key&#x3D;&quot;passworld&quot;&#x2F;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p><strong>v-show的用法与v-if相似，只不过v-show是改变元素的css属性display，当v-show的表达式值为false时元素会隐藏，在DOM上看会有display:none</strong></p><h3 id="关于v-show和v-if的比较"><a href="#关于v-show和v-if的比较" class="headerlink" title="关于v-show和v-if的比较"></a>关于v-show和v-if的比较</h3><p><strong>v-if是实时渲染，从DOM结构上看，条件为真时就渲染，不是真时就移除</strong><br><strong>v-show的元素是一直存在于DOM结构上的，只是条件为真时就隐藏而已</strong></p><h2 id="三、列表渲染指令"><a href="#三、列表渲染指令" class="headerlink" title="三、列表渲染指令"></a>三、列表渲染指令</h2><p>v-for指令的用法</p><h3 id="遍历多个对象（一定是数组）"><a href="#遍历多个对象（一定是数组）" class="headerlink" title="遍历多个对象（一定是数组）"></a>遍历多个对象（一定是数组）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;app&quot; &gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&quot;(arrs,index) in arr&quot;&gt;&#123;&#123;index+1&#125;&#125;-------&#123;&#123;arrs.name&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app &#x3D;new Vue(&#123;</span><br><span class="line">    el:&#39;.app&#39;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        arr:[</span><br><span class="line">        &#123;name:&quot;第一条&quot;&#125;,</span><br><span class="line">        &#123;name:&quot;第二条&quot;&#125;,</span><br><span class="line">        &#123;name:&quot;第三条&quot;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="遍历一个对象的多个属性"><a href="#遍历一个对象的多个属性" class="headerlink" title="遍历一个对象的多个属性"></a>遍历一个对象的多个属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;app&quot; &gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&quot;(value,key,index) in user&quot;&gt;&#123;&#123;index+1&#125;&#125;-------&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app &#x3D;new Vue(&#123;</span><br><span class="line">    el:&#39;.app&#39;,</span><br><span class="line">    data:&#123;</span><br><span class="line">       user:&#123;</span><br><span class="line">                name:&quot;哈哈&quot;,</span><br><span class="line">                sex:&quot;男&quot;,</span><br><span class="line">                age:33</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="数组更新"><a href="#数组更新" class="headerlink" title="数组更新"></a>数组更新</h3><p><strong>改变数组的一系列方法：（js基础）</strong></p><ul><li>push( )  —–在数组的最后一位添加</li><li>pop( )   —–弹出数组的最后一位</li><li>shift( )   —–弹出数组的第一位</li><li>unshift( ） —–在数组的第一位添加</li><li>sort( )        —–排序</li><li>splice( )     —–参数(位置，替换长度，替换内容)，可以做到删除，增加，替换数组</li><li>reverse( )  —–反转数组<br>以上方法改变的是原数组</li><li>filter( )  —–过滤数组</li><li>concat( )  —–拼接数组</li><li>slice( )  —–提取数组中元素，参数(开始位置，结束位置)<br>它们返回的是新的数组<br><strong>问题来了，以下变动的数组中，vue是不能检测到的，也不会触发视图更新</strong><blockquote><ol><li>改变数组的指定项，例如：app.book[3]=”《计算机导论技术》”**</li><li>修改数组的长短，例如：app.book.length=1**</li></ol></blockquote></li></ul><p><strong>解决：改变数组的指定项</strong><br>使用vue内置的set方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(app.book,3,&quot;《计算机导论技术》&quot;);</span><br></pre></td></tr></table></figure><p><strong>解决：修改数组的长短</strong><br>可以直接使用splice方法来解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.book.splice(1)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、基本指令&quot;&gt;&lt;a href=&quot;#一、基本指令&quot; class=&quot;headerlink&quot; title=&quot;一、基本指令&quot;&gt;&lt;/a&gt;一、基本指令&lt;/h2&gt;&lt;h3 id=&quot;v-clock&quot;&gt;&lt;a href=&quot;#v-clock&quot; class=&quot;headerlink&quot; title=&quot;v-clock&quot;&gt;&lt;/a&gt;v-clock&lt;/h3&gt;&lt;p&gt;当网速较慢，vue.js文件还没有加载完时，页面上会显示的字样，直到vue.js创建实例、编译模板时，DOM才会被替换，所以这个过程中屏幕会闪动&lt;br&gt;&lt;strong&gt;v-clock是一个解决初始化慢导致页面闪动的最佳实践，需要配合display：none使用&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="vue学习笔记" scheme="http://wanru97.gitee.io/wanrublog/tags/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue的v-bind指令</title>
    <link href="http://wanru97.gitee.io/wanrublog/2019/06/03/Vue%E7%9A%84v-bind%E6%8C%87/"/>
    <id>http://wanru97.gitee.io/wanrublog/2019/06/03/Vue%E7%9A%84v-bind%E6%8C%87/</id>
    <published>2019-06-03T06:17:22.000Z</published>
    <updated>2020-02-29T10:59:57.085Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前的学习中了解了v-bind指令，今天学习如何绑定class和绑定style<br>绑定class的多种方式，绑定style的多种方式</p></blockquote><a id="more"></a><h3 id="绑定class的几种方式"><a href="#绑定class的几种方式" class="headerlink" title="绑定class的几种方式"></a>绑定class的几种方式</h3><h4 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"> .box&#123;</span><br><span class="line">        border:1px solid #ccc;</span><br><span class="line">        height:30px;</span><br><span class="line">        width:140px;</span><br><span class="line">    &#125;</span><br><span class="line">    .active&#123;</span><br><span class="line">        background: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">     &lt;div :class&#x3D;&quot;&#123;&#39;box&#39;:isbox,&#39;active&#39;:isactive&#125;&quot;&gt;绑定class对象语法&lt;&#x2F;div&gt; &lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app &#x3D; new Vue(&#123;</span><br><span class="line">        el:&#39;#app&#39;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            isactive: false,</span><br><span class="line">            isbox: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>类名box依赖数据isbox，当isbox为true时，div会拥有类名box，当isbox的值为false时，div不会拥有类名box.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class&#x3D;&quot;&#123;&#39;类名&#39;:数据名&#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>练习一个小的dome：点击按钮后，div的背景会从蓝色切换成红色，再次点击后会切换回来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">    height:50px;</span><br><span class="line">    width:100px;</span><br><span class="line">&#125;</span><br><span class="line">.active1&#123;</span><br><span class="line">    background: red;</span><br><span class="line">&#125;</span><br><span class="line">.active2&#123;</span><br><span class="line">    background: blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div :class&#x3D;&quot;&#123;&#39;box&#39;:isbox,&#39;active1&#39;:isactive1,&#39;active2&#39;:isactive2&#125;&quot;&gt;点击按钮改变背景的颜色&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;button&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app &#x3D; new Vue(&#123;</span><br><span class="line">    el:&quot;#app&quot;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        isbox: true,</span><br><span class="line">        isactive1: true,</span><br><span class="line">        isactive2: false</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        button:function()&#123;</span><br><span class="line">            if(this.isactive1)&#123;</span><br><span class="line">                this.isactive1&#x3D;false;</span><br><span class="line">                this.isactive2&#x3D;true;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                this.isactive1&#x3D;true;</span><br><span class="line">                this.isactive2&#x3D;false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>当class的表达式过长或者是逻辑复杂时，可以绑定一个计算属性，这是一个很常见的用法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app2&quot;&gt;</span><br><span class="line">    &lt;div :class&#x3D;&quot;classes&quot;&gt;绑定计算属性的例子&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">var app2&#x3D; new Vue(&#123;</span><br><span class="line">    el:&quot;#app2&quot;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        isactive1: true,</span><br><span class="line">        isactive2: false</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        classes:function()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                &#39;active1&#39;:this.isactive1,</span><br><span class="line">                &#39;active2&#39;:this.isactive2</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h4><p>当需要应用多个 class 时， 可以使用数组语法 ， 给：class 绑定一个数组，应用一个 class<br>列表：<br>数组成员直接对应className–类名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- &lt;div :class&#x3D;&quot;[数据名1，数据名2]&quot;&gt;&lt;&#x2F;div&gt; --&gt;</span><br><span class="line"> &lt;div :class&#x3D;&quot;[class1，class2]&quot;&gt;例子&lt;&#x2F;div&gt;</span><br><span class="line">var app &#x3D; new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            class1: ‘active’,</span><br><span class="line">            class2: &#39;box&#39;</span><br><span class="line">        &#125;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在之前的学习中了解了v-bind指令，今天学习如何绑定class和绑定style&lt;br&gt;绑定class的多种方式，绑定style的多种方式&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="vue学习笔记" scheme="http://wanru97.gitee.io/wanrublog/tags/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue的计算属性</title>
    <link href="http://wanru97.gitee.io/wanrublog/2019/05/28/Vue%E7%9A%84%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/"/>
    <id>http://wanru97.gitee.io/wanrublog/2019/05/28/Vue%E7%9A%84%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</id>
    <published>2019-05-28T06:17:22.000Z</published>
    <updated>2020-02-29T10:23:07.123Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天学习了vue的计算属性，了解什么是计算属性，计算属性的用法，计算属性的缓存</p></blockquote><h3 id="什么是计算属性"><a href="#什么是计算属性" class="headerlink" title="什么是计算属性"></a>什么是计算属性</h3><p>在昨天的学习中了解到，在双大括号中可以进行简单的运算或添加过滤器处理简单的文本转化，但是如果要实现更复杂的数据转换需要用到计算属性，否则表达式过长或逻辑更复杂时，代码会难以阅读和维护。<br><strong>所有的计算属性都是以函数的形式写在实例中的computed选项内，最终返回结果</strong></p><h3 id="计算属性的用法"><a href="#计算属性的用法" class="headerlink" title="计算属性的用法"></a>计算属性的用法</h3><p>下面是一个练习计算属性的Dome，需求是计算两个购物车中商品的总价格，显示在页面中，当package1或package2中商品有变化的时候，例如商品数量，价格变动时，页面显示结果也要随之变化。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    两个购物车中商品的总价格为&#123;&#123;Allprice&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            package1:[&#123;</span><br><span class="line">                name: &quot;iPhone&quot;,</span><br><span class="line">                price: 6000,</span><br><span class="line">                count: 3</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                name: &quot;iPad&quot;,</span><br><span class="line">                price: 3000,</span><br><span class="line">                count: 1</span><br><span class="line">            &#125;],</span><br><span class="line">            package2: [&#123;</span><br><span class="line">                name: &quot;apple&quot;,</span><br><span class="line">                price: 3.5,</span><br><span class="line">                count: 10</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                name: &quot;banana&quot;,</span><br><span class="line">                price: 2.5,</span><br><span class="line">                count: 2</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            Allprice:function()&#123;</span><br><span class="line">                var p1num&#x3D;0;</span><br><span class="line">                for(var i &#x3D;0;i&lt;this.package1.length;i++)&#123;</span><br><span class="line">                    p1num+&#x3D;this.package1[i].price*this.package1[i].count;</span><br><span class="line">                &#125;;</span><br><span class="line">                var p2num&#x3D;0;</span><br><span class="line">                for(var j &#x3D;0;j&lt;this.package2.length;j++)&#123;</span><br><span class="line">                    p2num+&#x3D;this.package2[j].price*this.package2[j].count;</span><br><span class="line">                &#125;;</span><br><span class="line">                return p1num+p2num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="计算属性中的getter函数和setter函数"><a href="#计算属性中的getter函数和setter函数" class="headerlink" title="计算属性中的getter函数和setter函数"></a>计算属性中的getter函数和setter函数</h3><p>每个计算函数中都包括一个getter和一个setter，上面的Dome都是计算属性的默认用法，只利用了getter函数。在需要的时候也可以使用setter函数，当手动修改计算属性的值时就会触发setter函数，可以执行一些自定义的操作。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;显示名字：&#123;&#123;name&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">var app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            firstname: &#39;王&#39;,</span><br><span class="line">            lastname:&#39;明&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            name:&#123;</span><br><span class="line">                get:function()&#123;</span><br><span class="line">                return this.firstname+this.lastname;</span><br><span class="line">            &#125;,</span><br><span class="line">            set:function(newvalue)&#123;</span><br><span class="line">                console.log(&#39;执行的是setter函数&#39;)</span><br><span class="line">                this.firstname&#x3D;newvalue[0];</span><br><span class="line">                this.lastname&#x3D;newvalue[1];</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>页面中会显示名字：王明，在控制台输入app.name=[‘一刀一个’，‘小朋友’]<br>页面上会显示名字：一刀一个小朋友，控制台也会输出”执行的是setter函数”<br><strong>关于计算属性的实用小技巧：</strong><br><strong>1.计算属性可以依赖其他的计算属性</strong><br><strong>2.计算属性不仅可以依赖当前实例的数据，还可以依赖其他实例的数据</strong></p><h3 id="计算属性缓存"><a href="#计算属性缓存" class="headerlink" title="计算属性缓存"></a>计算属性缓存</h3><p>调用methods方法可以起到和计算属性相同的作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;!-- 注意：这里show是方法，所以要加（） --&gt;</span><br><span class="line">   &#123;&#123;show()&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">var app &#x3D; new Vue(&#123;</span><br><span class="line">    el: &#39;#app&#39;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        firstname: &#39;王&#39;,</span><br><span class="line">        lastname:&#39;明&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        show: function()&#123;</span><br><span class="line">            return this.firstname+this.lastname;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>二者的区别在于什么呢？<br>计算属性是基于它的依赖缓存的<br>不管页面是否渲染，当它所依赖的数据没有发生变化时，它永远不会发生改变。<br>但是页面上的方法是只要页面重新渲染，方法就会重新执行，不渲染就不会执行<br><strong>何时使用？</strong><br>使用计算属性还是methods取决于是否需要缓存，如果要遍历大数组和大量计算时候，应当使用计算属性</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天学习了vue的计算属性，了解什么是计算属性，计算属性的用法，计算属性的缓存&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;什么是计算属性&quot;&gt;&lt;a href=&quot;#什么是计算属性&quot; class=&quot;headerlink&quot; title=&quot;什么是计算属性&quot;&gt;&lt;/a&gt;什么是计算属性&lt;/h3&gt;&lt;p&gt;在昨天的学习中了解到，在双大括号中可以进行简单的运算或添加过滤器处理简单的文本转化，但是如果要实现更复杂的数据转换需要用到计算属性，否则表达式过长或逻辑更复杂时，代码会难以阅读和维护。&lt;br&gt;&lt;strong&gt;所有的计算属性都是以函数的形式写在实例中的computed选项内，最终返回结果&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;计算属性的用法&quot;&gt;&lt;a href=&quot;#计算属性的用法&quot; class=&quot;headerlink&quot; title=&quot;计算属性的用法&quot;&gt;&lt;/a&gt;计算属性的用法&lt;/h3&gt;&lt;p&gt;下面是一个练习计算属性的Dome，需求是计算两个购物车中商品的总价格，显示在页面中，当package1或package2中商品有变化的时候，例如商品数量，价格变动时，页面显示结果也要随之变化。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="vue学习笔记" scheme="http://wanru97.gitee.io/wanrublog/tags/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue的初识</title>
    <link href="http://wanru97.gitee.io/wanrublog/2019/05/26/Vue%E7%9A%84%E5%88%9D%E8%AF%86/"/>
    <id>http://wanru97.gitee.io/wanrublog/2019/05/26/Vue%E7%9A%84%E5%88%9D%E8%AF%86/</id>
    <published>2019-05-26T06:04:23.000Z</published>
    <updated>2020-02-29T10:59:57.082Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习Vue实例的创建，插值与表达式，生命周期钩子，过滤器，语法糖</p></blockquote><a id="more"></a><h1 id="创建vue实例"><a href="#创建vue实例" class="headerlink" title="创建vue实例"></a>创建vue实例</h1><p>在头部引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;vue@2.6.10&#x2F;dist&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app&#x3D;new Vue(&#123;</span><br><span class="line">        el:&#39;#app&#39;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            name:&#39;hello world&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>变量app就代表了这个实例<br>实例内的第一个选项，el，它用于指定页面中已经存在的DOM元素挂载vue实例，可以是HTMLElement或是选择器。可以使用content.$el访问该元素<br>在vue实例里的data选项内，可以声明需要双向绑定的数据</p><h2 id="除了显示的声明数据-就是上面声明数据的方式-还可以指向一个已有的变量，修改其中一个另一个也会发生变化"><a href="#除了显示的声明数据-就是上面声明数据的方式-还可以指向一个已有的变量，修改其中一个另一个也会发生变化" class="headerlink" title="除了显示的声明数据(就是上面声明数据的方式)还可以指向一个已有的变量，修改其中一个另一个也会发生变化"></a>除了显示的声明数据(就是上面声明数据的方式)还可以指向一个已有的变量，修改其中一个另一个也会发生变化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var myname&#x3D;&#123;</span><br><span class="line">            name:&#39;hello world&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    var app&#x3D;new Vue(&#123;</span><br><span class="line">        el:&#39;#app&#39;,</span><br><span class="line">        data: myname</span><br><span class="line">    &#125;);</span><br><span class="line">console.log(myname.name);&#x2F;&#x2F;&#39;hello world&#39;</span><br><span class="line">console.log(app.name);&#x2F;&#x2F;&#39;hello world&#39;</span><br></pre></td></tr></table></figure><h2 id="如何访问实例中的选项？"><a href="#如何访问实例中的选项？" class="headerlink" title="如何访问实例中的选项？"></a>如何访问实例中的选项？</h2><p>变量名.$选项名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(app.$el);</span><br><span class="line">console.log(app.$data);</span><br></pre></td></tr></table></figure><h2 id="如何访问选项data中的属性？"><a href="#如何访问选项data中的属性？" class="headerlink" title="如何访问选项data中的属性？"></a>如何访问选项data中的属性？</h2><p>变量名.属性名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(app.name);</span><br></pre></td></tr></table></figure><h1 id="插值与表达式"><a href="#插值与表达式" class="headerlink" title="插值与表达式"></a>插值与表达式</h1><p>使用双大括号是最基本的文本插值方法，会自动将双向绑定的数据实时显示出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;content&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>在双大括号中可以使用js表达式进行简单的运算、三元运算等，但它只支持单行表达式，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">    &#123;&#123;number&#x2F;10&#125;&#125;</span><br><span class="line">    &#123;&#123;isOk?&#39;确定&#39;:&#39;取消&#39;&#125;&#125;</span><br><span class="line">    &#123;&#123;text.split(&#39;,&#39;).reverse().join(&#39;,&#39;)&#125;&#125;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line"> var content&#x3D;new Vue(&#123;</span><br><span class="line">        el:&#39;.content&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            number: 100,</span><br><span class="line">            isOk: false,</span><br><span class="line">            text: &#39;123,456&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="问题：你觉得”var-a-6”是一个单行表达式吗？它不是哦"><a href="#问题：你觉得”var-a-6”是一个单行表达式吗？它不是哦" class="headerlink" title="问题：你觉得”var a = 6”是一个单行表达式吗？它不是哦"></a>问题：你觉得”var a = 6”是一个单行表达式吗？它不是哦</h2><h1 id="Vue的生命周期钩子"><a href="#Vue的生命周期钩子" class="headerlink" title="Vue的生命周期钩子"></a>Vue的生命周期钩子</h1><p>如果你学习过  jquery，那你一定知道ready()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">&#x2F;&#x2F;在DOM结构加载完成后执行该函数</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>生命周期钩子就相当于ready()方法一样，比较常用的有：<br>created：在实例创建完成后调用，此时还未挂载，所以$el不可用<br>mounted：在el挂载完成后调用，一般第一个业务逻辑会从此处开始<br>beforeDestroy：在实例销毁前调用，主要用于解绑监听事件等<br>具体写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&#123;&#123;time&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">var app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            time:new Date()</span><br><span class="line">        &#125;,</span><br><span class="line">        created: function()&#123;</span><br><span class="line">            alert(&#39;实例创建完成，但尚未挂载，注意观察页面内容&#39;);</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted: function()&#123;</span><br><span class="line">            alert(&quot;el挂载完成，页面内容已经改变&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><p>vue.js支持在插值的尾部添加管道符“|”对数据进行过滤，可以将数据进行格式化例如将数据字母变为大写等操作。过滤的规则是可以自定义的，需要在实例中添加filters选项进行设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;平均分：&#123;&#123;num | getaverage&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">var app&#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            num:[30,60,44,56,84,44,55]</span><br><span class="line">        &#125;,</span><br><span class="line">        filters:&#123;</span><br><span class="line">            getaverage: function(value)&#123;</span><br><span class="line">                var count&#x3D;0;</span><br><span class="line">                for(var i&#x3D;0;i&lt;value.length;i++)&#123;</span><br><span class="line">                    count+&#x3D;value[i];</span><br><span class="line">                &#125;</span><br><span class="line">                return Math.round(count&#x2F;value.length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>过滤器可以串联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;data | filtersA | filtersB&#125;&#125;</span><br></pre></td></tr></table></figure><p>也可以设置参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;data | filtersA(&#39;参数2&#39;,&#39;参数3&#39;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>第一个参数是数据本身</p><h1 id="指令和事件"><a href="#指令和事件" class="headerlink" title="指令和事件"></a>指令和事件</h1><p>在vue中带有v-前缀的就是指令<br>因为刚刚学习，先学习四个指令，其他指令会在接下来的学习中继续<br>##v-text指令，用来解析文本与双大括号的作用差不多</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot; v-text&#x3D;&quot;text&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">var app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            text:&#39;今天天气真好&#39;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="v-html指令，用来解析html"><a href="#v-html指令，用来解析html" class="headerlink" title="v-html指令，用来解析html"></a>v-html指令，用来解析html</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot; v-html&#x3D;&quot;html&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">var app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            html:&#39;&lt;p&gt;我是一段html&lt;p&gt;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="v-bind指令，用来绑定属性"><a href="#v-bind指令，用来绑定属性" class="headerlink" title="v-bind指令，用来绑定属性"></a>v-bind指令，用来绑定属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;a v-bind:href&#x3D;&quot;url&quot;&gt;百度&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br><span class="line">var app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">           url:&#39;http:&#x2F;&#x2F;www.baidu.com&#39;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="v-on指令，用来绑定事件监听器，绑定事件要处理的业务逻辑需要写在vue实例的methods选项里。"><a href="#v-on指令，用来绑定事件监听器，绑定事件要处理的业务逻辑需要写在vue实例的methods选项里。" class="headerlink" title="v-on指令，用来绑定事件监听器，绑定事件要处理的业务逻辑需要写在vue实例的methods选项里。"></a>v-on指令，用来绑定事件监听器，绑定事件要处理的业务逻辑需要写在vue实例的methods选项里。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;button v-on:click&#x3D;&quot;clickbutton&quot;&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;button&lt;&#x2F;div&gt;</span><br><span class="line">var app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            text:&#39;我是个按钮&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">       methods:&#123;</span><br><span class="line">            clickbutton: function()&#123;</span><br><span class="line">                this.text&#x3D;&#39;已经按过了&#39;;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h1><p>v-bind和v-on指令都提供了语法糖，也就是缩写<br>v-bind指令可以使用冒号进行代替</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;a v-bind:href&#x3D;&quot;url&quot;&gt;百度&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F;下面是缩写</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;a :href&#x3D;&quot;url&quot;&gt;百度&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>v-on指令可以使用@进行代替</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;button v-on:click&#x3D;&quot;clickbutton&quot;&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;button&lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F;下面是缩写</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;button @click&#x3D;&quot;clickbutton&quot;&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;button&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习Vue实例的创建，插值与表达式，生命周期钩子，过滤器，语法糖&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="vue学习笔记" scheme="http://wanru97.gitee.io/wanrublog/tags/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>css3实现div旋转</title>
    <link href="http://wanru97.gitee.io/wanrublog/2019/04/12/css3%E5%AE%9E%E7%8E%B0div%E6%97%8B%E8%BD%AC/"/>
    <id>http://wanru97.gitee.io/wanrublog/2019/04/12/css3%E5%AE%9E%E7%8E%B0div%E6%97%8B%E8%BD%AC/</id>
    <published>2019-04-12T06:24:05.000Z</published>
    <updated>2020-02-29T10:55:46.845Z</updated>
    
    <content type="html"><![CDATA[<p>在做页面加载时需要一个转圈的loading字体图标，所以需要用到css3的旋转<br>最后在网上查找出来，所以记录一下</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;Loading&quot;&gt;&lt;span class&#x3D;&quot;iconfont icon-loading&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.Loading &#123;</span><br><span class="line">  text-align: center;     </span><br><span class="line">  padding: 5px 5px;     </span><br><span class="line">&#125;</span><br><span class="line">.Loading .iconfont&#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  animation: rotate 1s linear infinite;  </span><br><span class="line">&#x2F;&#x2F;参数:动画规定名,完成动画所花事件,</span><br><span class="line">&#x2F;&#x2F;动画速度曲线(linear:从头到尾速度相同),播放次数(infinite:无限次播放)</span><br><span class="line">&#125;</span><br><span class="line">@keyframes rotate&#123;</span><br><span class="line">  from&#123;transform: rotate(0deg)&#125;</span><br><span class="line">  to&#123;transform: rotate(360deg)&#125;</span><br><span class="line">   &#x2F;&#x2F;rotate旋转从0度到360度</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><!-- more --><h5 id="keyframes-动画名称-这里面的内容代表着动画如何去动"><a href="#keyframes-动画名称-这里面的内容代表着动画如何去动" class="headerlink" title="@keyframes(动画名称){这里面的内容代表着动画如何去动}"></a>@keyframes(动画名称){这里面的内容代表着动画如何去动}</h5><p><strong>具体的兼容问题还有可以查看</strong><br><a href="http://caibaojian.com/css3/rules/@keyframes.htm" target="_blank" rel="noopener">传送门——&gt;</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@-moz-keyframes  rotate&#123;</span><br><span class="line">  from&#123;transform: rotate(0deg)&#125;</span><br><span class="line">  to&#123;transform: rotate(360deg)&#125;</span><br><span class="line">&#125;</span><br><span class="line">@-o-keyframes rotate&#123;</span><br><span class="line">  from&#123;transform: rotate(0deg)&#125;</span><br><span class="line">  to&#123;transform: rotate(360deg)&#125;</span><br><span class="line">&#125;</span><br><span class="line">@-webkit-keyframes rotate&#123;</span><br><span class="line">  from&#123;transform: rotate(0deg)&#125;</span><br><span class="line">  to&#123;transform: rotate(360deg)&#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes rotate&#123;</span><br><span class="line">  from&#123;transform: rotate(0deg)&#125;</span><br><span class="line">  to&#123;transform: rotate(360deg)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 @keyframes 中创建动画时，请把它捆绑到某个选择器，否则不会产生动画效果。<br>如何捆绑呢？<br>就是在你需要的div中添加animation属性，该属性一般都会有这两个值</p><ol><li>规定动画名称</li><li>规定动画时长<br>如果想要查看animation的所有属性，看看下面这个<br><a href="http://caibaojian.com/css3/properties/animation/animation.htm" target="_blank" rel="noopener">传送门——&gt;</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做页面加载时需要一个转圈的loading字体图标，所以需要用到css3的旋转&lt;br&gt;最后在网上查找出来，所以记录一下&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="css3" scheme="http://wanru97.gitee.io/wanrublog/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的主题更换与使用教程</title>
    <link href="http://wanru97.gitee.io/wanrublog/2019/03/22/Hexo%E7%9A%84%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://wanru97.gitee.io/wanrublog/2019/03/22/Hexo%E7%9A%84%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2019-03-22T12:00:01.000Z</published>
    <updated>2020-02-29T10:55:09.443Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、关于Hexo的主题更换"><a href="#一、关于Hexo的主题更换" class="headerlink" title="一、关于Hexo的主题更换"></a>一、关于Hexo的主题更换</h3><p>如何更换我们喜欢的Hexo主题呢？<br>网上有很多好看简洁的Hexo主题可以更换，下面将以Yilia这款我喜欢的主题为例子，进行更换。</p><a id="more"></a><p>首先你需要找到你喜欢的主题下载地址，<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">Yilia主题传送门</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/03/19/AuVAHI.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>点击<strong>Clone or download</strong>后将链接复制下来<br>找到Hexo文件的位置，进入themes文件夹内，这个文件夹就是用来放hexo主题的位置的。在themes文件夹下右键选择<strong>Git Bash Here</strong><br>输入命令,git clone +你复制的链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia.git</span><br></pre></td></tr></table></figure><p>温馨小提示：</p><ol><li>此时你应该注意一下你所在文件路径是否正确，应该是在themes文件夹下的</li><li>此时的粘贴快捷键不是ctrl+v,而是Insert。</li></ol><p>按下回车键后就可以安心等待就可以了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/03/19/AuZuIx.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>下载完成后，你就可以看到themes文件夹下出现了一个新的名为hexo-theme-yilia文件夹，这个就是我们刚刚下载的主题。<br>返回到上一层，找到_config.yml这个文件，用你的编辑器打开它，找到theme属性，更改属性值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: hexo-theme-yilia</span><br></pre></td></tr></table></figure><p>将属性值改为刚刚下载的主题名，将文件进行保存<br>输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &#x2F;&#x2F;清除一下缓存</span><br><span class="line">hexo g  &#x2F;&#x2F;生成静态页面</span><br><span class="line">hexo s &#x2F;&#x2F;开启本地服务器</span><br></pre></td></tr></table></figure><p>这时会出现一个端口号，通过浏览器打开这个端口号（一般端口号为4000），你就可以看到更改之后的主题啦<br>一般主题的开发者都会在README.md里面描述该主题的配置信息，根据配置文档中的内容进行更改就可以了</p><h3 id="二、如何发表新的文章"><a href="#二、如何发表新的文章" class="headerlink" title="二、如何发表新的文章"></a>二、如何发表新的文章</h3><p>输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;new article&quot;</span><br></pre></td></tr></table></figure><p>会在对应的路径下创建一个名为“new article”的markdown文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/03/22/A8gV8U.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>只要在这个文件中用markdown语言进行编写文章内容即可，保存后，输入命令</p><p>```<br>hexo g     //生成静态页面<br>hexo s    //启动本地服务器进行查看<br>hexo d   //查看后没有问题即可部署到github上</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、关于Hexo的主题更换&quot;&gt;&lt;a href=&quot;#一、关于Hexo的主题更换&quot; class=&quot;headerlink&quot; title=&quot;一、关于Hexo的主题更换&quot;&gt;&lt;/a&gt;一、关于Hexo的主题更换&lt;/h3&gt;&lt;p&gt;如何更换我们喜欢的Hexo主题呢？&lt;br&gt;网上有很多好看简洁的Hexo主题可以更换，下面将以Yilia这款我喜欢的主题为例子，进行更换。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://wanru97.gitee.io/wanrublog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的安装与部署</title>
    <link href="http://wanru97.gitee.io/wanrublog/2019/03/22/Hexo%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/"/>
    <id>http://wanru97.gitee.io/wanrublog/2019/03/22/Hexo%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/</id>
    <published>2019-03-22T09:53:31.000Z</published>
    <updated>2020-02-29T10:12:41.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前期准备工作"><a href="#一、前期准备工作" class="headerlink" title="一、前期准备工作"></a>一、前期准备工作</h2><h3 id="一-安装git"><a href="#一-安装git" class="headerlink" title="(一) 安装git"></a>(一) 安装git</h3><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git下载地址</a>,找到对应的系统下载安装即可<br>安装后在桌面点击鼠标右键会显示两个选项<strong>Git GUI Here</strong>和<strong>Git Bash Here</strong>，就安装成功啦</p><h3 id="二-安装node-js和npm"><a href="#二-安装node-js和npm" class="headerlink" title="(二) 安装node.js和npm"></a>(二) 安装node.js和npm</h3><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node.js下载地址</a>,找到对应系统下载安装，安装成功后可以在桌面点击右键选择<strong>Git Bash Here</strong>，打开后，输入命令<strong>node -v</strong>，会显示node的版本号，输入命令<strong>npm -v</strong>，会显示npm的版本号</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/11049080-005a733afb9cc3ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看版本号" title="">                </div>                <div class="image-caption">查看版本号</div>            </figure><a id="more"></a><h3 id="三-准备Github的账号"><a href="#三-准备Github的账号" class="headerlink" title="(三) 准备Github的账号"></a>(三) 准备Github的账号</h3><p>我们需要注册一个github账号，来托管我们的博客，<a href="https://github.com/" target="_blank" rel="noopener">传送门地址</a><br>注册完成后，登录点击<strong>start a project</strong>   创建一个库</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/11049080-bf543ed2d3d061bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><p>库的名字需要以这样的形势填写—–&gt;用户名.github.io</p><h3 id="四-配置SSH"><a href="#四-配置SSH" class="headerlink" title="(四) 配置SSH"></a>(四) 配置SSH</h3><p>如果没有配置过SSH，需要配置一下SSH，这样每次从本地上传到github就不必填写用户名和密码，这样更加方便<br>SSH是一种网络协议，用于计算机之间的加密，主要用于远程登陆</p><ol><li>先设置一下你的邮箱和用户名<br>在git窗口中输入下面两条命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure></li><li>生成ssh密钥<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure></li><li>进入根目录下，查找<strong>.ssh</strong>文件夹，打开文件<strong>id_rsa.pub</strong>，将里面的内容复制<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~     &#x2F;&#x2F;进入根目录</span><br><span class="line">cd .ssh      &#x2F;&#x2F;进入.ssh文件夹</span><br><span class="line">vi id_rsa.pub   &#x2F;&#x2F;打开这个文件，复制内容后输入:q退出文件</span><br></pre></td></tr></table></figure></li><li>打开github，点击右上角的头像先择setting，将复制的内容填写进去<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/11049080-595ef5d3f038debe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure>这样你的密钥就完成了<h2 id="二、开始下载安装hexo"><a href="#二、开始下载安装hexo" class="headerlink" title="二、开始下载安装hexo"></a>二、开始下载安装hexo</h2><h3 id="一-下载安装hexo"><a href="#一-下载安装hexo" class="headerlink" title="(一)下载安装hexo"></a>(一)下载安装hexo</h3>利用npm安装hexo，在你想要放hexo文件的地方点击右键选择<strong>Git Bash Here</strong><br>输入命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>下载完成后接着输入命令，hexo会自动在该文件夹下生成网站所需要的文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>安装依赖包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>现在你就可以看看博客的样子啦~<br>输入以下命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g   &#x2F;&#x2F;生成静态文件</span><br><span class="line">hexo s   &#x2F;&#x2F;开启本地服务器，ctrl+c关闭服务器</span><br></pre></td></tr></table></figure>用你的浏览器访问localhost:4000（一般端口号都是4000），你就可以看到刚刚安装的博客了，但是这是在你的本地上，别人并不能看见，我们需要把它部署到github上，让别人都可以看见<h3 id="二-将本地文件部署到github上"><a href="#二-将本地文件部署到github上" class="headerlink" title="(二)将本地文件部署到github上"></a>(二)将本地文件部署到github上</h3>打开你放置hexo文件的地方找到_config.yml文件，用你的编辑器打开这个文件,(repository: <a href="mailto:git@github.com">git@github.com</a>:用户名/用户名.github.io.git)<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/11049080-5649fffb909895d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure>然后执行下面命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>部署完成啦，现在只要访问【https://你的用户名.github.io/】这个网址就大功告成了。</li></ol><p>在这整个过程中你也许会遇到报错，不要慌张，去翻墙谷歌一下。懒得翻墙的可以去Bing搜索一下问题，你一定可以找到解决方法的~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前期准备工作&quot;&gt;&lt;a href=&quot;#一、前期准备工作&quot; class=&quot;headerlink&quot; title=&quot;一、前期准备工作&quot;&gt;&lt;/a&gt;一、前期准备工作&lt;/h2&gt;&lt;h3 id=&quot;一-安装git&quot;&gt;&lt;a href=&quot;#一-安装git&quot; class=&quot;headerlink&quot; title=&quot;(一) 安装git&quot;&gt;&lt;/a&gt;(一) 安装git&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git下载地址&lt;/a&gt;,找到对应的系统下载安装即可&lt;br&gt;安装后在桌面点击鼠标右键会显示两个选项&lt;strong&gt;Git GUI Here&lt;/strong&gt;和&lt;strong&gt;Git Bash Here&lt;/strong&gt;，就安装成功啦&lt;/p&gt;
&lt;h3 id=&quot;二-安装node-js和npm&quot;&gt;&lt;a href=&quot;#二-安装node-js和npm&quot; class=&quot;headerlink&quot; title=&quot;(二) 安装node.js和npm&quot;&gt;&lt;/a&gt;(二) 安装node.js和npm&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;node.js下载地址&lt;/a&gt;,找到对应系统下载安装，安装成功后可以在桌面点击右键选择&lt;strong&gt;Git Bash Here&lt;/strong&gt;，打开后，输入命令&lt;strong&gt;node -v&lt;/strong&gt;，会显示node的版本号，输入命令&lt;strong&gt;npm -v&lt;/strong&gt;，会显示npm的版本号&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://upload-images.jianshu.io/upload_images/11049080-005a733afb9cc3ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;查看版本号&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;查看版本号&lt;/div&gt;
            &lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://wanru97.gitee.io/wanrublog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>如何使用GitHub</title>
    <link href="http://wanru97.gitee.io/wanrublog/2019/03/05/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Github/"/>
    <id>http://wanru97.gitee.io/wanrublog/2019/03/05/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Github/</id>
    <published>2019-03-05T12:00:01.000Z</published>
    <updated>2020-02-29T11:02:47.086Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h5 id="Git是什么？"><a href="#Git是什么？" class="headerlink" title="Git是什么？"></a>Git是什么？</h5><p>Git 是用于 Linux内核开发的版本控制工具。版本控制工具就是用于记录开发过程的每个版本</p><h5 id="GitHub是什么"><a href="#GitHub是什么" class="headerlink" title="GitHub是什么?"></a>GitHub是什么?</h5><p>它是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，所以叫GitHub。<br>我们可以从使用GitHub的方式去了解如何使用Git。</p></blockquote><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git下载地址</a>,找到对应的系统下载安装即可<br>安装后在桌面点击鼠标右键会显示两个选项<strong>Git GUI Here</strong>和<strong>Git Bash Here</strong></p><a id="more"></a><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p><strong>去GitHub注册一个账号</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/11049080-09efdb361c1a85d1..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="设置SSH-Key"><a href="#设置SSH-Key" class="headerlink" title="设置SSH Key"></a>设置SSH Key</h2><p>为了让你的GitHub账户认识你的笔记本，给笔记本权限操作你账户中的库</p><ul><li>在GitHub页面上的右上角有一个头像，点击它，点击Settings，找到SSH and GPG keys,去使用一下它的帮助，<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/11049080-4d67eb60ec0593f5..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li>点击后寻找Generating a new SSH key and adding it to the ssh-agent,<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/11049080-22b87db01a5b3c1c..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>复制这一行代码，把它输入终端后，一直按回车（注意：改成你的邮箱）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/11049080-aa14adcc78847003..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>此时它会在你的文件夹下生成一个私钥id_rsa和一个公钥id_rsa.pub,接下来我们需要把id_rsa.pub的内容拷贝下来，你可以使用vim编辑器去拷贝也可以输入cat id_rsa.pub,去用鼠标拷贝（注意：要完整的复制，不要少）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/11049080-d03438baf25cffaa..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li>打开GitHub页面，点击New SSH keys，在title下输入名称（什么都行），在key下粘贴，点击添加<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/11049080-8d000804c936ffe6..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2></li><li>点击Start a project，输入库名，设置为公有（私有收费），勾选一下初始化生成一个READMA文件（一般都会勾选，作者会在文件中写出项目概要，流程，等信息）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/11049080-66a630b373787de7..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="clone已有库"><a href="#clone已有库" class="headerlink" title="clone已有库"></a>clone已有库</h2></li><li>在页面中寻找clone or download，点击后使用Use SSH，复制它提供的链接<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/11049080-518d232571d87528..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li>打开你想存放库的文件夹，右键<strong>Git Bash Here</strong>打开终端，此时上方会显示文件夹的路径，输入git clone (你复制的地址)，回车，等待下载完成后就可以在本地库中添加文件，进行代码的编写。<h2 id="基本操作方法"><a href="#基本操作方法" class="headerlink" title="基本操作方法"></a>基本操作方法</h2><h3 id="向远程库提交文件"><a href="#向远程库提交文件" class="headerlink" title="向远程库提交文件"></a>向远程库提交文件</h3>在本地库中编辑文件后想要更新到远程库上<br>打开终端(路径应该是本地库文件夹),输入git命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .               &#x2F;&#x2F;将所有文件添加到暂存区，点代表所有文件</span><br><span class="line">git commit -m&quot;自己填写信息&quot;    &#x2F;&#x2F;填写简洁的概述操作信息</span><br><span class="line">git push origin master     &#x2F;&#x2F;更新远程仓库的master分支</span><br></pre></td></tr></table></figure>当你第一次提交到远程库时可能会出现让你设置你的邮箱和密码，输入后会弹出一个githu的登陆页面，登陆进去就可以<h3 id="把本地新建的项目推送到github上"><a href="#把本地新建的项目推送到github上" class="headerlink" title="把本地新建的项目推送到github上"></a>把本地新建的项目推送到github上</h3>如果是要放在新的库中需要在github上创建一个新的库，然后复制库的地址</li><li>在项目文件夹下打开终端(注意路径)，输入命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init      &#x2F;&#x2F;初始化仓库，把该文件变成本地仓库</span><br><span class="line">git remote add origin 地址    &#x2F;&#x2F;将本地仓与远程仓链接</span><br><span class="line">git add .</span><br><span class="line">git commit -m&#39;填写记录&#39;</span><br><span class="line">git push origin master    &#x2F;&#x2F;更新到远程仓库中</span><br></pre></td></tr></table></figure>接下来只需要在项目文件夹下编辑文件，然后使用git向远程仓库提交即可<br>更新未完结。。。。<br>以上内容是从《GitHub入门与实践》书中，结合本人的使用总结而来，如果有错误请见谅。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h5 id=&quot;Git是什么？&quot;&gt;&lt;a href=&quot;#Git是什么？&quot; class=&quot;headerlink&quot; title=&quot;Git是什么？&quot;&gt;&lt;/a&gt;Git是什么？&lt;/h5&gt;&lt;p&gt;Git 是用于 Linux内核开发的版本控制工具。版本控制工具就是用于记录开发过程的每个版本&lt;/p&gt;
&lt;h5 id=&quot;GitHub是什么&quot;&gt;&lt;a href=&quot;#GitHub是什么&quot; class=&quot;headerlink&quot; title=&quot;GitHub是什么?&quot;&gt;&lt;/a&gt;GitHub是什么?&lt;/h5&gt;&lt;p&gt;它是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，所以叫GitHub。&lt;br&gt;我们可以从使用GitHub的方式去了解如何使用Git。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装Git&quot;&gt;&lt;a href=&quot;#安装Git&quot; class=&quot;headerlink&quot; title=&quot;安装Git&quot;&gt;&lt;/a&gt;安装Git&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git下载地址&lt;/a&gt;,找到对应的系统下载安装即可&lt;br&gt;安装后在桌面点击鼠标右键会显示两个选项&lt;strong&gt;Git GUI Here&lt;/strong&gt;和&lt;strong&gt;Git Bash Here&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Github" scheme="http://wanru97.gitee.io/wanrublog/tags/Github/"/>
    
  </entry>
  
</feed>
