[{"title":"Vue.js 表单与v-model","date":"2019-06-23T07:09:14.000Z","path":"2019/06/23/Vue.js表单与v-model/","text":"vue.js提供了v-model指令，用于在表单类元素上双向绑定数据 基本用法在输入框上和文本域上的用法1234567891011121314151617&lt;div id&#x3D;&quot;app&quot;&gt;在输入框中的用法&lt;br &#x2F;&gt;&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;输入内容&quot; v-model&#x3D;&quot;inText&quot;&#x2F;&gt;输入框中输入的内容是:&#123;&#123;inText&#125;&#125;&lt;br&#x2F;&gt;在文本域中的用法&lt;br &#x2F;&gt;&lt;textarea v-model&#x3D;&quot;inTextarea&quot; cols&#x3D;&quot;30&quot; rows&#x3D;&quot;5&quot;&gt;&lt;&#x2F;textarea&gt;文本域中输入的内容是:&#123;&#123;inTextarea&#125;&#125;&lt;br&#x2F;&gt;&lt;&#x2F;div&gt;&lt;script&gt; var app&#x3D;new Vue(&#123; el:&quot;#app&quot;, data:&#123; inText:&#39;&#39;, inTextarea:&#39;&#39; &#125;&#125;)&lt;&#x2F;script&gt; 注意：使用v-model后，表单显示的值只依赖所绑定的数据，不再关心其初始值使用v-model时，输入汉字时，在拼音阶段是不会更新数据的，只有在选定词组之后才会更新，如果需要实时更新，用@input来代替v-model，具体写法使用时查阅即可 单选按钮单个单选按钮不需要v-model，直接使用v-bind:checked绑定一个布尔值，为真时选中，为否是不选中 12345678910(1)、单个单选按钮&lt;br &#x2F;&gt;&lt;input type&#x3D;&quot;radio&quot; :checked&#x3D;&quot;picked&quot; &#x2F;&gt;苹果&lt;br &#x2F;&gt;&lt;script&gt; var app&#x3D;new Vue(&#123; el:&quot;#app&quot;, data:&#123; picked:false &#125; &#125;)&lt;&#x2F;script&gt; 多个单选按钮需要v-model配合value使用，绑定数据的值与value一致时就会选中该项 12345678910111213(2)、多个单选按钮&lt;br &#x2F;&gt;&lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&quot;pickme&quot; value&#x3D;&quot;苹果&quot; &#x2F;&gt;苹果&lt;br &#x2F;&gt;&lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&quot;pickme&quot; value&#x3D;&quot;香蕉&quot; &#x2F;&gt;香蕉&lt;br &#x2F;&gt;&lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&quot;pickme&quot; value&#x3D;&quot;桃子&quot; &#x2F;&gt;桃子&lt;br &#x2F;&gt;现在选中的选项是:&#123;&#123;pickme&#125;&#125;&lt;script&gt; var app&#x3D;new Vue(&#123; el:&quot;#app&quot;, data:&#123; pickme:&#39;&#39; &#125;&#125;)&lt;&#x2F;script&gt; 复选框单独使用与单选按钮不同的是，复选框单独使用时可以使用v-model绑定一个布尔值 123456789&lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;checked&quot;&#x2F;&gt;铅笔&lt;br &#x2F;&gt; &lt;script&gt; var app&#x3D;new Vue(&#123; el:&quot;#app&quot;, data:&#123; checked:false &#125; &#125;) &lt;&#x2F;script&gt; 组合使用与多个单选按钮的写法一样，也是v-model和value一起，但是绑定的数据类型必须是数组在勾选时候，value的值会自动push到绑定的数据数组中 下拉列表单选123456&lt;select v-model&#x3D;&quot;other&quot;&gt; &lt;option value&#x3D;&quot;天津&quot;&gt;天津&lt;&#x2F;option&gt; &lt;option value&#x3D;&quot;北京&quot;&gt;北京&lt;&#x2F;option&gt; &lt;option value&#x3D;&quot;上海&quot;&gt;上海&lt;&#x2F;option&gt;&lt;&#x2F;select&gt;&lt;p&gt;选择的选项是&#123;&#123;other&#125;&#125;&lt;&#x2F;p&gt; 绑定的other数据的数据类型为字符串option中含有value属性时v-model会优先匹配value的值，如果没有则直接匹配option的text 多选只需添加multiple属性 123456&lt;select v-model&#x3D;&quot;others&quot; multiple&gt; &lt;option value&#x3D;&quot;天津&quot;&gt;天津&lt;&#x2F;option&gt; &lt;option value&#x3D;&quot;北京&quot;&gt;北京&lt;&#x2F;option&gt; &lt;option value&#x3D;&quot;上海&quot;&gt;上海&lt;&#x2F;option&gt;&lt;&#x2F;select&gt;&lt;p&gt;选择的选项是&#123;&#123;others&#125;&#125;&lt;&#x2F;p&gt; 注意：绑定的others数据的数据类型是数组 修饰符.lazy在输入框中，v-mode默认是在input事件中同步输入框的数据，使用修饰符.lazy会使与输入框绑定的数据不会实时改变，而是在失去焦点或是按回车的时候才更新。 1&lt;input type&#x3D;&quot;text&quot; v-model.lazy&#x3D;&quot;msg&quot; &#x2F;&gt; .number使用修饰符.number可以将输入的数据转换成Number类型，否则就算是输入的数据是数字，但其实是String类型 1&lt;input type&#x3D;&quot;text&quot; v-model.number&#x3D;&quot;msg&quot; &#x2F;&gt; .trim.trim修饰符可以自动过滤输入的首尾空格 1&lt;input type&#x3D;&quot;text&quot; v-model.trim&#x3D;&quot;msg&quot; &#x2F;&gt;","tags":[{"name":"vue学习笔记","slug":"vue学习笔记","permalink":"http://wanru97.gitee.io/wanrublog/tags/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"vue.js中的内置指令","date":"2019-06-15T06:17:22.000Z","path":"2019/06/15/vue.js中的内置指令/","text":"一、基本指令v-clock当网速较慢，vue.js文件还没有加载完时，页面上会显示的字样，直到vue.js创建实例、编译模板时，DOM才会被替换，所以这个过程中屏幕会闪动v-clock是一个解决初始化慢导致页面闪动的最佳实践，需要配合display：none使用 12345678910111213141516&lt;style&gt; [v-cloak]&#123; display:none; &#125;&lt;&#x2F;style&gt;&lt;div class&#x3D;&quot;app&quot; v-cloak&gt; &#123;&#123;message&#125;&#125;&lt;&#x2F;div&gt;&lt;script&gt; var app &#x3D;new Vue(&#123; el:&#39;.app&#39;, data:&#123; message:&#39;信息显示&#39; &#125; &#125;)&lt;&#x2F;script&gt; v-oncev-once指令的作用是定义它的元素或组件只渲染一次。首次渲染后不会随着数据的变化重新渲染，将被视为静态内容 二、条件渲染指令v-if、v-else-if、v-else123&lt;p v-if&#x3D;&quot;num&#x3D;&#x3D;&#x3D; 3&quot;&gt;此时num为3，将num数值改为2时看看&lt;&#x2F;p&gt;&lt;p v-else-if&#x3D;&quot;num&#x3D;&#x3D;&#x3D; 2&quot;&gt;num数值为2时显示该行&lt;&#x2F;p&gt;&lt;p v-else&gt;否则显示该行&lt;&#x2F;p&gt; 举个栗子_：有一个用户名输入框，点击按钮后，变为密码输入框 12345678910111213141516171819&lt;div class&#x3D;&quot;app&quot; &gt;&lt;div v-if&#x3D;&quot;type&#x3D;&#x3D;&#x3D;&#39;name&#39;&quot;&gt;用户：&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入&quot;&#x2F;&gt;&lt;&#x2F;div&gt;&lt;div v-else&gt;密码：&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入&quot;&#x2F;&gt;&lt;&#x2F;div&gt;&lt;button v-on:click&#x3D;&quot;typebut&quot;&gt;点击切换&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;&lt;script&gt; var app &#x3D;new Vue(&#123; el:&#39;.app&#39;, data:&#123; type:&#39;name&#39; &#125;, methods:&#123; typebut:function()&#123; this.type&#x3D;(this.type&#x3D;&#x3D;&#x3D;&#39;name&#39;?&#39;pas&#39; :&#39;name&#39;) &#125; &#125; &#125;)&lt;&#x2F;script&gt; 问题出现了，在输入框输入内容后点击切换，虽然DOM变了，但是之前的输入框内容并没有改变，这说明input元素被复用了如何解决这个问题呢？可以添加key属性，key的值必须是唯一的 12&lt;div v-if&#x3D;&quot;type&#x3D;&#x3D;&#x3D;&#39;name&#39;&quot;&gt;用户：&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入&quot; key&#x3D;&quot;usename&quot;&#x2F;&gt;&lt;&#x2F;div&gt;&lt;div v-else&gt;密码：&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入&quot; key&#x3D;&quot;passworld&quot;&#x2F;&gt;&lt;&#x2F;div&gt; v-showv-show的用法与v-if相似，只不过v-show是改变元素的css属性display，当v-show的表达式值为false时元素会隐藏，在DOM上看会有display:none 关于v-show和v-if的比较v-if是实时渲染，从DOM结构上看，条件为真时就渲染，不是真时就移除v-show的元素是一直存在于DOM结构上的，只是条件为真时就隐藏而已 三、列表渲染指令v-for指令的用法 遍历多个对象（一定是数组）1234567891011121314151617&lt;div class&#x3D;&quot;app&quot; &gt; &lt;ul&gt; &lt;li v-for&#x3D;&quot;(arrs,index) in arr&quot;&gt;&#123;&#123;index+1&#125;&#125;-------&#123;&#123;arrs.name&#125;&#125;&lt;&#x2F;li&gt; &lt;&#x2F;ul&gt;&lt;&#x2F;div&gt;&lt;script&gt;var app &#x3D;new Vue(&#123; el:&#39;.app&#39;, data:&#123; arr:[ &#123;name:&quot;第一条&quot;&#125;, &#123;name:&quot;第二条&quot;&#125;, &#123;name:&quot;第三条&quot;&#125; ] &#125;&#125;)&lt;&#x2F;script&gt; 遍历一个对象的多个属性1234567891011121314151617&lt;div class&#x3D;&quot;app&quot; &gt; &lt;ul&gt; &lt;li v-for&#x3D;&quot;(value,key,index) in user&quot;&gt;&#123;&#123;index+1&#125;&#125;-------&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;&lt;&#x2F;li&gt; &lt;&#x2F;ul&gt;&lt;&#x2F;div&gt;&lt;script&gt;var app &#x3D;new Vue(&#123; el:&#39;.app&#39;, data:&#123; user:&#123; name:&quot;哈哈&quot;, sex:&quot;男&quot;, age:33 &#125; &#125;&#125;)&lt;&#x2F;script&gt; 数组更新改变数组的一系列方法：（js基础） push( ) —–在数组的最后一位添加 pop( ) —–弹出数组的最后一位 shift( ) —–弹出数组的第一位 unshift( ） —–在数组的第一位添加 sort( ) —–排序 splice( ) —–参数(位置，替换长度，替换内容)，可以做到删除，增加，替换数组 reverse( ) —–反转数组以上方法改变的是原数组 filter( ) —–过滤数组 concat( ) —–拼接数组 slice( ) —–提取数组中元素，参数(开始位置，结束位置)它们返回的是新的数组问题来了，以下变动的数组中，vue是不能检测到的，也不会触发视图更新 改变数组的指定项，例如：app.book[3]=”《计算机导论技术》”** 修改数组的长短，例如：app.book.length=1** 解决：改变数组的指定项使用vue内置的set方法： 1Vue.set(app.book,3,&quot;《计算机导论技术》&quot;); 解决：修改数组的长短可以直接使用splice方法来解决 1app.book.splice(1)","tags":[{"name":"vue学习笔记","slug":"vue学习笔记","permalink":"http://wanru97.gitee.io/wanrublog/tags/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"Vue的v-bind指令","date":"2019-06-03T06:17:22.000Z","path":"2019/06/03/Vue的v-bind指/","text":"在之前的学习中了解了v-bind指令，今天学习如何绑定class和绑定style绑定class的多种方式，绑定style的多种方式 绑定class的几种方式对象语法123456789101112131415161718192021&lt;style&gt; .box&#123; border:1px solid #ccc; height:30px; width:140px; &#125; .active&#123; background: red; &#125;&lt;&#x2F;style&gt;&lt;div id&#x3D;&quot;app&quot;&gt; &lt;div :class&#x3D;&quot;&#123;&#39;box&#39;:isbox,&#39;active&#39;:isactive&#125;&quot;&gt;绑定class对象语法&lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;script&gt; var app &#x3D; new Vue(&#123; el:&#39;#app&#39;, data:&#123; isactive: false, isbox: true &#125; &#125;)&lt;&#x2F;script&gt; 类名box依赖数据isbox，当isbox为true时，div会拥有类名box，当isbox的值为false时，div不会拥有类名box. 1&lt;div :class&#x3D;&quot;&#123;&#39;类名&#39;:数据名&#125;&quot;&gt;&lt;&#x2F;div&gt; 练习一个小的dome：点击按钮后，div的背景会从蓝色切换成红色，再次点击后会切换回来 12345678910111213141516171819202122232425262728293031323334353637&lt;style&gt;.box&#123; height:50px; width:100px;&#125;.active1&#123; background: red;&#125;.active2&#123; background: blue;&#125;&lt;&#x2F;style&gt;&lt;div id&#x3D;&quot;app&quot;&gt; &lt;div :class&#x3D;&quot;&#123;&#39;box&#39;:isbox,&#39;active1&#39;:isactive1,&#39;active2&#39;:isactive2&#125;&quot;&gt;点击按钮改变背景的颜色&lt;&#x2F;div&gt; &lt;button @click&#x3D;&quot;button&quot;&gt;按钮&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;&lt;script&gt;var app &#x3D; new Vue(&#123; el:&quot;#app&quot;, data:&#123; isbox: true, isactive1: true, isactive2: false &#125;, methods:&#123; button:function()&#123; if(this.isactive1)&#123; this.isactive1&#x3D;false; this.isactive2&#x3D;true; &#125;else&#123; this.isactive1&#x3D;true; this.isactive2&#x3D;false; &#125; &#125; &#125;&#125;)&lt;&#x2F;script&gt; 当class的表达式过长或者是逻辑复杂时，可以绑定一个计算属性，这是一个很常见的用法。 123456789101112131415161718&lt;div id&#x3D;&quot;app2&quot;&gt; &lt;div :class&#x3D;&quot;classes&quot;&gt;绑定计算属性的例子&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;var app2&#x3D; new Vue(&#123; el:&quot;#app2&quot;, data:&#123; isactive1: true, isactive2: false &#125;, computed:&#123; classes:function()&#123; return &#123; &#39;active1&#39;:this.isactive1, &#39;active2&#39;:this.isactive2 &#125; &#125; &#125;&#125;) 数组语法当需要应用多个 class 时， 可以使用数组语法 ， 给：class 绑定一个数组，应用一个 class列表：数组成员直接对应className–类名 123456789&lt;!-- &lt;div :class&#x3D;&quot;[数据名1，数据名2]&quot;&gt;&lt;&#x2F;div&gt; --&gt; &lt;div :class&#x3D;&quot;[class1，class2]&quot;&gt;例子&lt;&#x2F;div&gt;var app &#x3D; new Vue(&#123; el:&quot;#app&quot;, data:&#123; class1: ‘active’, class2: &#39;box&#39; &#125;)&#125;","tags":[{"name":"vue学习笔记","slug":"vue学习笔记","permalink":"http://wanru97.gitee.io/wanrublog/tags/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"Vue的计算属性","date":"2019-05-28T06:17:22.000Z","path":"2019/05/28/Vue的计算属性/","text":"今天学习了vue的计算属性，了解什么是计算属性，计算属性的用法，计算属性的缓存 什么是计算属性在昨天的学习中了解到，在双大括号中可以进行简单的运算或添加过滤器处理简单的文本转化，但是如果要实现更复杂的数据转换需要用到计算属性，否则表达式过长或逻辑更复杂时，代码会难以阅读和维护。所有的计算属性都是以函数的形式写在实例中的computed选项内，最终返回结果 计算属性的用法下面是一个练习计算属性的Dome，需求是计算两个购物车中商品的总价格，显示在页面中，当package1或package2中商品有变化的时候，例如商品数量，价格变动时，页面显示结果也要随之变化。 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;div id&#x3D;&quot;app&quot;&gt; 两个购物车中商品的总价格为&#123;&#123;Allprice&#125;&#125;&lt;&#x2F;div&gt;&lt;script&gt; var app &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; package1:[&#123; name: &quot;iPhone&quot;, price: 6000, count: 3 &#125;,&#123; name: &quot;iPad&quot;, price: 3000, count: 1 &#125;], package2: [&#123; name: &quot;apple&quot;, price: 3.5, count: 10 &#125;,&#123; name: &quot;banana&quot;, price: 2.5, count: 2 &#125;] &#125;, computed:&#123; Allprice:function()&#123; var p1num&#x3D;0; for(var i &#x3D;0;i&lt;this.package1.length;i++)&#123; p1num+&#x3D;this.package1[i].price*this.package1[i].count; &#125;; var p2num&#x3D;0; for(var j &#x3D;0;j&lt;this.package2.length;j++)&#123; p2num+&#x3D;this.package2[j].price*this.package2[j].count; &#125;; return p1num+p2num; &#125; &#125; &#125;);&lt;&#x2F;script&gt; 计算属性中的getter函数和setter函数每个计算函数中都包括一个getter和一个setter，上面的Dome都是计算属性的默认用法，只利用了getter函数。在需要的时候也可以使用setter函数，当手动修改计算属性的值时就会触发setter函数，可以执行一些自定义的操作。例如： 1234567891011121314151617181920&lt;div id&#x3D;&quot;app&quot;&gt;显示名字：&#123;&#123;name&#125;&#125;&lt;&#x2F;div&gt;var app &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; firstname: &#39;王&#39;, lastname:&#39;明&#39; &#125;, computed: &#123; name:&#123; get:function()&#123; return this.firstname+this.lastname; &#125;, set:function(newvalue)&#123; console.log(&#39;执行的是setter函数&#39;) this.firstname&#x3D;newvalue[0]; this.lastname&#x3D;newvalue[1]; &#125; &#125; &#125; &#125;) 页面中会显示名字：王明，在控制台输入app.name=[‘一刀一个’，‘小朋友’]页面上会显示名字：一刀一个小朋友，控制台也会输出”执行的是setter函数”关于计算属性的实用小技巧：1.计算属性可以依赖其他的计算属性2.计算属性不仅可以依赖当前实例的数据，还可以依赖其他实例的数据 计算属性缓存调用methods方法可以起到和计算属性相同的作用 12345678910111213141516&lt;div id&#x3D;&quot;app&quot;&gt;&lt;!-- 注意：这里show是方法，所以要加（） --&gt; &#123;&#123;show()&#125;&#125;&lt;&#x2F;div&gt;var app &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; firstname: &#39;王&#39;, lastname:&#39;明&#39; &#125;, methods:&#123; show: function()&#123; return this.firstname+this.lastname; &#125; &#125;&#125;) 二者的区别在于什么呢？计算属性是基于它的依赖缓存的不管页面是否渲染，当它所依赖的数据没有发生变化时，它永远不会发生改变。但是页面上的方法是只要页面重新渲染，方法就会重新执行，不渲染就不会执行何时使用？使用计算属性还是methods取决于是否需要缓存，如果要遍历大数组和大量计算时候，应当使用计算属性","tags":[{"name":"vue学习笔记","slug":"vue学习笔记","permalink":"http://wanru97.gitee.io/wanrublog/tags/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"Vue的初识","date":"2019-05-26T06:04:23.000Z","path":"2019/05/26/Vue的初识/","text":"学习Vue实例的创建，插值与表达式，生命周期钩子，过滤器，语法糖 创建vue实例在头部引入 1&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;vue@2.6.10&#x2F;dist&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt; 123456789&lt;div id&#x3D;&quot;app&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;div&gt;&lt;script&gt; var app&#x3D;new Vue(&#123; el:&#39;#app&#39;, data:&#123; name:&#39;hello world&#39; &#125; &#125;);&lt;&#x2F;script&gt; 变量app就代表了这个实例实例内的第一个选项，el，它用于指定页面中已经存在的DOM元素挂载vue实例，可以是HTMLElement或是选择器。可以使用content.$el访问该元素在vue实例里的data选项内，可以声明需要双向绑定的数据 除了显示的声明数据(就是上面声明数据的方式)还可以指向一个已有的变量，修改其中一个另一个也会发生变化123456789var myname&#x3D;&#123; name:&#39;hello world&#39; &#125; var app&#x3D;new Vue(&#123; el:&#39;#app&#39;, data: myname &#125;);console.log(myname.name);&#x2F;&#x2F;&#39;hello world&#39;console.log(app.name);&#x2F;&#x2F;&#39;hello world&#39; 如何访问实例中的选项？变量名.$选项名 12console.log(app.$el);console.log(app.$data); 如何访问选项data中的属性？变量名.属性名 1console.log(app.name); 插值与表达式使用双大括号是最基本的文本插值方法，会自动将双向绑定的数据实时显示出来 1&lt;div class&#x3D;&quot;content&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;div&gt; 在双大括号中可以使用js表达式进行简单的运算、三元运算等，但它只支持单行表达式，例如 12345678910111213&lt;div class&#x3D;&quot;content&quot;&gt; &#123;&#123;number&#x2F;10&#125;&#125; &#123;&#123;isOk?&#39;确定&#39;:&#39;取消&#39;&#125;&#125; &#123;&#123;text.split(&#39;,&#39;).reverse().join(&#39;,&#39;)&#125;&#125; &lt;&#x2F;div&gt; var content&#x3D;new Vue(&#123; el:&#39;.content&#39;, data: &#123; number: 100, isOk: false, text: &#39;123,456&#39; &#125; &#125;); 问题：你觉得”var a = 6”是一个单行表达式吗？它不是哦Vue的生命周期钩子如果你学习过 jquery，那你一定知道ready()方法 123$(document).ready(function()&#123;&#x2F;&#x2F;在DOM结构加载完成后执行该函数&#125;); 生命周期钩子就相当于ready()方法一样，比较常用的有：created：在实例创建完成后调用，此时还未挂载，所以$el不可用mounted：在el挂载完成后调用，一般第一个业务逻辑会从此处开始beforeDestroy：在实例销毁前调用，主要用于解绑监听事件等具体写法： 12345678910111213&lt;div id&#x3D;&quot;app&quot;&gt;&#123;&#123;time&#125;&#125;&lt;&#x2F;div&gt;var app &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; time:new Date() &#125;, created: function()&#123; alert(&#39;实例创建完成，但尚未挂载，注意观察页面内容&#39;); &#125;, mounted: function()&#123; alert(&quot;el挂载完成，页面内容已经改变&quot;); &#125; &#125;) 过滤器vue.js支持在插值的尾部添加管道符“|”对数据进行过滤，可以将数据进行格式化例如将数据字母变为大写等操作。过滤的规则是可以自定义的，需要在实例中添加filters选项进行设置 123456789101112131415&lt;div id&#x3D;&quot;app&quot;&gt;平均分：&#123;&#123;num | getaverage&#125;&#125;&lt;&#x2F;div&gt;var app&#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; num:[30,60,44,56,84,44,55] &#125;, filters:&#123; getaverage: function(value)&#123; var count&#x3D;0; for(var i&#x3D;0;i&lt;value.length;i++)&#123; count+&#x3D;value[i]; &#125; return Math.round(count&#x2F;value.length); &#125; &#125; 过滤器可以串联 1&#123;&#123;data | filtersA | filtersB&#125;&#125; 也可以设置参数 1&#123;&#123;data | filtersA(&#39;参数2&#39;,&#39;参数3&#39;)&#125;&#125; 第一个参数是数据本身 指令和事件在vue中带有v-前缀的就是指令因为刚刚学习，先学习四个指令，其他指令会在接下来的学习中继续##v-text指令，用来解析文本与双大括号的作用差不多 1234567&lt;div id&#x3D;&quot;app&quot; v-text&#x3D;&quot;text&quot;&gt;&lt;&#x2F;div&gt;var app &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; text:&#39;今天天气真好&#39; &#125;&#125;) v-html指令，用来解析html1234567&lt;div id&#x3D;&quot;app&quot; v-html&#x3D;&quot;html&quot;&gt;&lt;&#x2F;div&gt;var app &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; html:&#39;&lt;p&gt;我是一段html&lt;p&gt;&#39; &#125;&#125;) v-bind指令，用来绑定属性1234567&lt;div id&#x3D;&quot;app&quot;&gt;&lt;a v-bind:href&#x3D;&quot;url&quot;&gt;百度&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;var app &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; url:&#39;http:&#x2F;&#x2F;www.baidu.com&#39; &#125;&#125;) v-on指令，用来绑定事件监听器，绑定事件要处理的业务逻辑需要写在vue实例的methods选项里。1234567891011&lt;div id&#x3D;&quot;app&quot;&gt;&lt;button v-on:click&#x3D;&quot;clickbutton&quot;&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;button&lt;&#x2F;div&gt;var app &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; text:&#39;我是个按钮&#39; &#125;, methods:&#123; clickbutton: function()&#123; this.text&#x3D;&#39;已经按过了&#39;; &#125;&#125;) 语法糖v-bind和v-on指令都提供了语法糖，也就是缩写v-bind指令可以使用冒号进行代替 123&lt;div id&#x3D;&quot;app&quot;&gt;&lt;a v-bind:href&#x3D;&quot;url&quot;&gt;百度&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;&#x2F;&#x2F;下面是缩写&lt;div id&#x3D;&quot;app&quot;&gt;&lt;a :href&#x3D;&quot;url&quot;&gt;百度&lt;&#x2F;a&gt;&lt;&#x2F;div&gt; v-on指令可以使用@进行代替 123&lt;div id&#x3D;&quot;app&quot;&gt;&lt;button v-on:click&#x3D;&quot;clickbutton&quot;&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;button&lt;&#x2F;div&gt;&#x2F;&#x2F;下面是缩写&lt;div id&#x3D;&quot;app&quot;&gt;&lt;button @click&#x3D;&quot;clickbutton&quot;&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;button&lt;&#x2F;div&gt;","tags":[{"name":"vue学习笔记","slug":"vue学习笔记","permalink":"http://wanru97.gitee.io/wanrublog/tags/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"css3实现div旋转","date":"2019-04-12T06:24:05.000Z","path":"2019/04/12/css3实现div旋转/","text":"在做页面加载时需要一个转圈的loading字体图标，所以需要用到css3的旋转最后在网上查找出来，所以记录一下 123456789101112131415161718&lt;div class&#x3D;&quot;Loading&quot;&gt;&lt;span class&#x3D;&quot;iconfont icon-loading&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&lt;style&gt;.Loading &#123; text-align: center; padding: 5px 5px; &#125;.Loading .iconfont&#123; display: inline-block; animation: rotate 1s linear infinite; &#x2F;&#x2F;参数:动画规定名,完成动画所花事件,&#x2F;&#x2F;动画速度曲线(linear:从头到尾速度相同),播放次数(infinite:无限次播放)&#125;@keyframes rotate&#123; from&#123;transform: rotate(0deg)&#125; to&#123;transform: rotate(360deg)&#125; &#x2F;&#x2F;rotate旋转从0度到360度&#125;&lt;&#x2F;style&gt; @keyframes(动画名称){这里面的内容代表着动画如何去动}具体的兼容问题还有可以查看传送门——&gt; 12345678910111213141516@-moz-keyframes rotate&#123; from&#123;transform: rotate(0deg)&#125; to&#123;transform: rotate(360deg)&#125;&#125;@-o-keyframes rotate&#123; from&#123;transform: rotate(0deg)&#125; to&#123;transform: rotate(360deg)&#125;&#125;@-webkit-keyframes rotate&#123; from&#123;transform: rotate(0deg)&#125; to&#123;transform: rotate(360deg)&#125;&#125;@keyframes rotate&#123; from&#123;transform: rotate(0deg)&#125; to&#123;transform: rotate(360deg)&#125;&#125; 在 @keyframes 中创建动画时，请把它捆绑到某个选择器，否则不会产生动画效果。如何捆绑呢？就是在你需要的div中添加animation属性，该属性一般都会有这两个值 规定动画名称 规定动画时长如果想要查看animation的所有属性，看看下面这个传送门——&gt;","tags":[{"name":"css3","slug":"css3","permalink":"http://wanru97.gitee.io/wanrublog/tags/css3/"}]},{"title":"Hexo的主题更换与使用教程","date":"2019-03-22T12:00:01.000Z","path":"2019/03/22/Hexo的主题更换与使用教程/","text":"一、关于Hexo的主题更换如何更换我们喜欢的Hexo主题呢？网上有很多好看简洁的Hexo主题可以更换，下面将以Yilia这款我喜欢的主题为例子，进行更换。 首先你需要找到你喜欢的主题下载地址，Yilia主题传送门 点击Clone or download后将链接复制下来找到Hexo文件的位置，进入themes文件夹内，这个文件夹就是用来放hexo主题的位置的。在themes文件夹下右键选择Git Bash Here输入命令,git clone +你复制的链接 1git clone https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia.git 温馨小提示： 此时你应该注意一下你所在文件路径是否正确，应该是在themes文件夹下的 此时的粘贴快捷键不是ctrl+v,而是Insert。 按下回车键后就可以安心等待就可以了 下载完成后，你就可以看到themes文件夹下出现了一个新的名为hexo-theme-yilia文件夹，这个就是我们刚刚下载的主题。返回到上一层，找到_config.yml这个文件，用你的编辑器打开它，找到theme属性，更改属性值 1theme: hexo-theme-yilia 将属性值改为刚刚下载的主题名，将文件进行保存输入命令 123hexo clean &#x2F;&#x2F;清除一下缓存hexo g &#x2F;&#x2F;生成静态页面hexo s &#x2F;&#x2F;开启本地服务器 这时会出现一个端口号，通过浏览器打开这个端口号（一般端口号为4000），你就可以看到更改之后的主题啦一般主题的开发者都会在README.md里面描述该主题的配置信息，根据配置文档中的内容进行更改就可以了 二、如何发表新的文章输入命令 1hexo new &quot;new article&quot; 会在对应的路径下创建一个名为“new article”的markdown文件 只要在这个文件中用markdown语言进行编写文章内容即可，保存后，输入命令 ```hexo g //生成静态页面hexo s //启动本地服务器进行查看hexo d //查看后没有问题即可部署到github上","tags":[{"name":"hexo","slug":"hexo","permalink":"http://wanru97.gitee.io/wanrublog/tags/hexo/"}]},{"title":"Hexo的安装与部署","date":"2019-03-22T09:53:31.000Z","path":"2019/03/22/Hexo的安装与部署/","text":"一、前期准备工作(一) 安装gitgit下载地址,找到对应的系统下载安装即可安装后在桌面点击鼠标右键会显示两个选项Git GUI Here和Git Bash Here，就安装成功啦 (二) 安装node.js和npmnode.js下载地址,找到对应系统下载安装，安装成功后可以在桌面点击右键选择Git Bash Here，打开后，输入命令node -v，会显示node的版本号，输入命令npm -v，会显示npm的版本号 查看版本号 (三) 准备Github的账号我们需要注册一个github账号，来托管我们的博客，传送门地址注册完成后，登录点击start a project 创建一个库 image 库的名字需要以这样的形势填写—–&gt;用户名.github.io (四) 配置SSH如果没有配置过SSH，需要配置一下SSH，这样每次从本地上传到github就不必填写用户名和密码，这样更加方便SSH是一种网络协议，用于计算机之间的加密，主要用于远程登陆 先设置一下你的邮箱和用户名在git窗口中输入下面两条命令12git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot; 生成ssh密钥1ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot; 进入根目录下，查找.ssh文件夹，打开文件id_rsa.pub，将里面的内容复制123cd ~ &#x2F;&#x2F;进入根目录cd .ssh &#x2F;&#x2F;进入.ssh文件夹vi id_rsa.pub &#x2F;&#x2F;打开这个文件，复制内容后输入:q退出文件 打开github，点击右上角的头像先择setting，将复制的内容填写进去 image 这样你的密钥就完成了二、开始下载安装hexo(一)下载安装hexo利用npm安装hexo，在你想要放hexo文件的地方点击右键选择Git Bash Here输入命令1npm install -g hexo 下载完成后接着输入命令，hexo会自动在该文件夹下生成网站所需要的文件1hexo init 安装依赖包1npm install 现在你就可以看看博客的样子啦~输入以下命令12hexo g &#x2F;&#x2F;生成静态文件hexo s &#x2F;&#x2F;开启本地服务器，ctrl+c关闭服务器 用你的浏览器访问localhost:4000（一般端口号都是4000），你就可以看到刚刚安装的博客了，但是这是在你的本地上，别人并不能看见，我们需要把它部署到github上，让别人都可以看见(二)将本地文件部署到github上打开你放置hexo文件的地方找到_config.yml文件，用你的编辑器打开这个文件,(repository: git@github.com:用户名/用户名.github.io.git) image 然后执行下面命令12hexo ghexo d 部署完成啦，现在只要访问【https://你的用户名.github.io/】这个网址就大功告成了。 在这整个过程中你也许会遇到报错，不要慌张，去翻墙谷歌一下。懒得翻墙的可以去Bing搜索一下问题，你一定可以找到解决方法的~","tags":[{"name":"hexo","slug":"hexo","permalink":"http://wanru97.gitee.io/wanrublog/tags/hexo/"}]},{"title":"如何使用GitHub","date":"2019-03-05T12:00:01.000Z","path":"2019/03/05/如何使用Github/","text":"Git是什么？Git 是用于 Linux内核开发的版本控制工具。版本控制工具就是用于记录开发过程的每个版本 GitHub是什么?它是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，所以叫GitHub。我们可以从使用GitHub的方式去了解如何使用Git。 安装Gitgit下载地址,找到对应的系统下载安装即可安装后在桌面点击鼠标右键会显示两个选项Git GUI Here和Git Bash Here 创建用户去GitHub注册一个账号 设置SSH Key为了让你的GitHub账户认识你的笔记本，给笔记本权限操作你账户中的库 在GitHub页面上的右上角有一个头像，点击它，点击Settings，找到SSH and GPG keys,去使用一下它的帮助， 点击后寻找Generating a new SSH key and adding it to the ssh-agent, 复制这一行代码，把它输入终端后，一直按回车（注意：改成你的邮箱） 此时它会在你的文件夹下生成一个私钥id_rsa和一个公钥id_rsa.pub,接下来我们需要把id_rsa.pub的内容拷贝下来，你可以使用vim编辑器去拷贝也可以输入cat id_rsa.pub,去用鼠标拷贝（注意：要完整的复制，不要少） 打开GitHub页面，点击New SSH keys，在title下输入名称（什么都行），在key下粘贴，点击添加 创建仓库 点击Start a project，输入库名，设置为公有（私有收费），勾选一下初始化生成一个READMA文件（一般都会勾选，作者会在文件中写出项目概要，流程，等信息） clone已有库 在页面中寻找clone or download，点击后使用Use SSH，复制它提供的链接 打开你想存放库的文件夹，右键Git Bash Here打开终端，此时上方会显示文件夹的路径，输入git clone (你复制的地址)，回车，等待下载完成后就可以在本地库中添加文件，进行代码的编写。基本操作方法向远程库提交文件在本地库中编辑文件后想要更新到远程库上打开终端(路径应该是本地库文件夹),输入git命令123git add . &#x2F;&#x2F;将所有文件添加到暂存区，点代表所有文件git commit -m&quot;自己填写信息&quot; &#x2F;&#x2F;填写简洁的概述操作信息git push origin master &#x2F;&#x2F;更新远程仓库的master分支 当你第一次提交到远程库时可能会出现让你设置你的邮箱和密码，输入后会弹出一个githu的登陆页面，登陆进去就可以把本地新建的项目推送到github上如果是要放在新的库中需要在github上创建一个新的库，然后复制库的地址 在项目文件夹下打开终端(注意路径)，输入命令12345git init &#x2F;&#x2F;初始化仓库，把该文件变成本地仓库git remote add origin 地址 &#x2F;&#x2F;将本地仓与远程仓链接git add .git commit -m&#39;填写记录&#39;git push origin master &#x2F;&#x2F;更新到远程仓库中 接下来只需要在项目文件夹下编辑文件，然后使用git向远程仓库提交即可更新未完结。。。。以上内容是从《GitHub入门与实践》书中，结合本人的使用总结而来，如果有错误请见谅。","tags":[{"name":"Github","slug":"Github","permalink":"http://wanru97.gitee.io/wanrublog/tags/Github/"}]}]